/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IBeraChef {
  export type WeightStruct = {
    receiver: AddressLike;
    percentageNumerator: BigNumberish;
  };

  export type WeightStructOutput = [
    receiver: string,
    percentageNumerator: bigint
  ] & { receiver: string; percentageNumerator: bigint };

  export type CuttingBoardStruct = {
    startBlock: BigNumberish;
    weights: IBeraChef.WeightStruct[];
  };

  export type CuttingBoardStructOutput = [
    startBlock: bigint,
    weights: IBeraChef.WeightStructOutput[]
  ] & { startBlock: bigint; weights: IBeraChef.WeightStructOutput[] };
}

export interface BerachefInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "activateQueuedCuttingBoard"
      | "cuttingBoardBlockDelay"
      | "defaultCuttingBoard"
      | "distributor"
      | "getActiveCuttingBoard"
      | "getDefaultCuttingBoard"
      | "getOperator"
      | "getQueuedCuttingBoard"
      | "initialize"
      | "isFriendOfTheChef"
      | "isQueuedCuttingBoardReady"
      | "isReady"
      | "maxNumWeightsPerCuttingBoard"
      | "owner"
      | "proxiableUUID"
      | "queueNewCuttingBoard"
      | "renounceOwnership"
      | "setCuttingBoardBlockDelay"
      | "setDefaultCuttingBoard"
      | "setMaxNumWeightsPerCuttingBoard"
      | "setOperator"
      | "transferOwnership"
      | "updateFriendsOfTheChef"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivateCuttingBoard"
      | "CuttingBoardBlockDelaySet"
      | "FriendsOfTheChefUpdated"
      | "Initialized"
      | "MaxNumWeightsPerCuttingBoardSet"
      | "OwnershipTransferred"
      | "QueueCuttingBoard"
      | "SetDefaultCuttingBoard"
      | "SetOperator"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateQueuedCuttingBoard",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cuttingBoardBlockDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultCuttingBoard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCuttingBoard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultCuttingBoard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueuedCuttingBoard",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFriendOfTheChef",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isQueuedCuttingBoardReady",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isReady", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxNumWeightsPerCuttingBoard",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queueNewCuttingBoard",
    values: [AddressLike, BigNumberish, IBeraChef.WeightStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCuttingBoardBlockDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultCuttingBoard",
    values: [IBeraChef.CuttingBoardStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxNumWeightsPerCuttingBoard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFriendsOfTheChef",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateQueuedCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cuttingBoardBlockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQueuedCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFriendOfTheChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQueuedCuttingBoardReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReady", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxNumWeightsPerCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueNewCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCuttingBoardBlockDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxNumWeightsPerCuttingBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFriendsOfTheChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace ActivateCuttingBoardEvent {
  export type InputTuple = [
    valCoinbase: AddressLike,
    startBlock: BigNumberish,
    weights: IBeraChef.WeightStruct[]
  ];
  export type OutputTuple = [
    valCoinbase: string,
    startBlock: bigint,
    weights: IBeraChef.WeightStructOutput[]
  ];
  export interface OutputObject {
    valCoinbase: string;
    startBlock: bigint;
    weights: IBeraChef.WeightStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CuttingBoardBlockDelaySetEvent {
  export type InputTuple = [cuttingBoardBlockDelay: BigNumberish];
  export type OutputTuple = [cuttingBoardBlockDelay: bigint];
  export interface OutputObject {
    cuttingBoardBlockDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FriendsOfTheChefUpdatedEvent {
  export type InputTuple = [receiver: AddressLike, isFriend: boolean];
  export type OutputTuple = [receiver: string, isFriend: boolean];
  export interface OutputObject {
    receiver: string;
    isFriend: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxNumWeightsPerCuttingBoardSetEvent {
  export type InputTuple = [maxNumWeightsPerCuttingBoard: BigNumberish];
  export type OutputTuple = [maxNumWeightsPerCuttingBoard: bigint];
  export interface OutputObject {
    maxNumWeightsPerCuttingBoard: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QueueCuttingBoardEvent {
  export type InputTuple = [
    valCoinbase: AddressLike,
    startBlock: BigNumberish,
    weights: IBeraChef.WeightStruct[]
  ];
  export type OutputTuple = [
    valCoinbase: string,
    startBlock: bigint,
    weights: IBeraChef.WeightStructOutput[]
  ];
  export interface OutputObject {
    valCoinbase: string;
    startBlock: bigint;
    weights: IBeraChef.WeightStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDefaultCuttingBoardEvent {
  export type InputTuple = [cuttingBoard: IBeraChef.CuttingBoardStruct];
  export type OutputTuple = [cuttingBoard: IBeraChef.CuttingBoardStructOutput];
  export interface OutputObject {
    cuttingBoard: IBeraChef.CuttingBoardStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetOperatorEvent {
  export type InputTuple = [
    valCoinbase: AddressLike,
    operatorAddress: AddressLike
  ];
  export type OutputTuple = [valCoinbase: string, operatorAddress: string];
  export interface OutputObject {
    valCoinbase: string;
    operatorAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Berachef extends BaseContract {
  connect(runner?: ContractRunner | null): Berachef;
  waitForDeployment(): Promise<this>;

  interface: BerachefInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  activateQueuedCuttingBoard: TypedContractMethod<
    [valCoinbase: AddressLike, blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  cuttingBoardBlockDelay: TypedContractMethod<[], [bigint], "view">;

  defaultCuttingBoard: TypedContractMethod<[], [bigint], "view">;

  distributor: TypedContractMethod<[], [string], "view">;

  getActiveCuttingBoard: TypedContractMethod<
    [valCoinbase: AddressLike],
    [IBeraChef.CuttingBoardStructOutput],
    "view"
  >;

  getDefaultCuttingBoard: TypedContractMethod<
    [],
    [IBeraChef.CuttingBoardStructOutput],
    "view"
  >;

  getOperator: TypedContractMethod<
    [valCoinbase: AddressLike],
    [string],
    "view"
  >;

  getQueuedCuttingBoard: TypedContractMethod<
    [valCoinbase: AddressLike],
    [IBeraChef.CuttingBoardStructOutput],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _distributor: AddressLike,
      _governance: AddressLike,
      _maxNumWeightsPerCuttingBoard: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isFriendOfTheChef: TypedContractMethod<
    [receiver: AddressLike],
    [boolean],
    "view"
  >;

  isQueuedCuttingBoardReady: TypedContractMethod<
    [valCoinbase: AddressLike, blockNumber: BigNumberish],
    [boolean],
    "view"
  >;

  isReady: TypedContractMethod<[], [boolean], "view">;

  maxNumWeightsPerCuttingBoard: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  queueNewCuttingBoard: TypedContractMethod<
    [
      valCoinbase: AddressLike,
      startBlock: BigNumberish,
      weights: IBeraChef.WeightStruct[]
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setCuttingBoardBlockDelay: TypedContractMethod<
    [_cuttingBoardBlockDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultCuttingBoard: TypedContractMethod<
    [cb: IBeraChef.CuttingBoardStruct],
    [void],
    "nonpayable"
  >;

  setMaxNumWeightsPerCuttingBoard: TypedContractMethod<
    [_maxNumWeightsPerCuttingBoard: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOperator: TypedContractMethod<
    [operatorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFriendsOfTheChef: TypedContractMethod<
    [receiver: AddressLike, isFriend: boolean],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateQueuedCuttingBoard"
  ): TypedContractMethod<
    [valCoinbase: AddressLike, blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cuttingBoardBlockDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultCuttingBoard"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getActiveCuttingBoard"
  ): TypedContractMethod<
    [valCoinbase: AddressLike],
    [IBeraChef.CuttingBoardStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDefaultCuttingBoard"
  ): TypedContractMethod<[], [IBeraChef.CuttingBoardStructOutput], "view">;
  getFunction(
    nameOrSignature: "getOperator"
  ): TypedContractMethod<[valCoinbase: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getQueuedCuttingBoard"
  ): TypedContractMethod<
    [valCoinbase: AddressLike],
    [IBeraChef.CuttingBoardStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _distributor: AddressLike,
      _governance: AddressLike,
      _maxNumWeightsPerCuttingBoard: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isFriendOfTheChef"
  ): TypedContractMethod<[receiver: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isQueuedCuttingBoardReady"
  ): TypedContractMethod<
    [valCoinbase: AddressLike, blockNumber: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxNumWeightsPerCuttingBoard"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "queueNewCuttingBoard"
  ): TypedContractMethod<
    [
      valCoinbase: AddressLike,
      startBlock: BigNumberish,
      weights: IBeraChef.WeightStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCuttingBoardBlockDelay"
  ): TypedContractMethod<
    [_cuttingBoardBlockDelay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultCuttingBoard"
  ): TypedContractMethod<
    [cb: IBeraChef.CuttingBoardStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxNumWeightsPerCuttingBoard"
  ): TypedContractMethod<
    [_maxNumWeightsPerCuttingBoard: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<[operatorAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFriendsOfTheChef"
  ): TypedContractMethod<
    [receiver: AddressLike, isFriend: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "ActivateCuttingBoard"
  ): TypedContractEvent<
    ActivateCuttingBoardEvent.InputTuple,
    ActivateCuttingBoardEvent.OutputTuple,
    ActivateCuttingBoardEvent.OutputObject
  >;
  getEvent(
    key: "CuttingBoardBlockDelaySet"
  ): TypedContractEvent<
    CuttingBoardBlockDelaySetEvent.InputTuple,
    CuttingBoardBlockDelaySetEvent.OutputTuple,
    CuttingBoardBlockDelaySetEvent.OutputObject
  >;
  getEvent(
    key: "FriendsOfTheChefUpdated"
  ): TypedContractEvent<
    FriendsOfTheChefUpdatedEvent.InputTuple,
    FriendsOfTheChefUpdatedEvent.OutputTuple,
    FriendsOfTheChefUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxNumWeightsPerCuttingBoardSet"
  ): TypedContractEvent<
    MaxNumWeightsPerCuttingBoardSetEvent.InputTuple,
    MaxNumWeightsPerCuttingBoardSetEvent.OutputTuple,
    MaxNumWeightsPerCuttingBoardSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "QueueCuttingBoard"
  ): TypedContractEvent<
    QueueCuttingBoardEvent.InputTuple,
    QueueCuttingBoardEvent.OutputTuple,
    QueueCuttingBoardEvent.OutputObject
  >;
  getEvent(
    key: "SetDefaultCuttingBoard"
  ): TypedContractEvent<
    SetDefaultCuttingBoardEvent.InputTuple,
    SetDefaultCuttingBoardEvent.OutputTuple,
    SetDefaultCuttingBoardEvent.OutputObject
  >;
  getEvent(
    key: "SetOperator"
  ): TypedContractEvent<
    SetOperatorEvent.InputTuple,
    SetOperatorEvent.OutputTuple,
    SetOperatorEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "ActivateCuttingBoard(address,uint64,tuple[])": TypedContractEvent<
      ActivateCuttingBoardEvent.InputTuple,
      ActivateCuttingBoardEvent.OutputTuple,
      ActivateCuttingBoardEvent.OutputObject
    >;
    ActivateCuttingBoard: TypedContractEvent<
      ActivateCuttingBoardEvent.InputTuple,
      ActivateCuttingBoardEvent.OutputTuple,
      ActivateCuttingBoardEvent.OutputObject
    >;

    "CuttingBoardBlockDelaySet(uint64)": TypedContractEvent<
      CuttingBoardBlockDelaySetEvent.InputTuple,
      CuttingBoardBlockDelaySetEvent.OutputTuple,
      CuttingBoardBlockDelaySetEvent.OutputObject
    >;
    CuttingBoardBlockDelaySet: TypedContractEvent<
      CuttingBoardBlockDelaySetEvent.InputTuple,
      CuttingBoardBlockDelaySetEvent.OutputTuple,
      CuttingBoardBlockDelaySetEvent.OutputObject
    >;

    "FriendsOfTheChefUpdated(address,bool)": TypedContractEvent<
      FriendsOfTheChefUpdatedEvent.InputTuple,
      FriendsOfTheChefUpdatedEvent.OutputTuple,
      FriendsOfTheChefUpdatedEvent.OutputObject
    >;
    FriendsOfTheChefUpdated: TypedContractEvent<
      FriendsOfTheChefUpdatedEvent.InputTuple,
      FriendsOfTheChefUpdatedEvent.OutputTuple,
      FriendsOfTheChefUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxNumWeightsPerCuttingBoardSet(uint8)": TypedContractEvent<
      MaxNumWeightsPerCuttingBoardSetEvent.InputTuple,
      MaxNumWeightsPerCuttingBoardSetEvent.OutputTuple,
      MaxNumWeightsPerCuttingBoardSetEvent.OutputObject
    >;
    MaxNumWeightsPerCuttingBoardSet: TypedContractEvent<
      MaxNumWeightsPerCuttingBoardSetEvent.InputTuple,
      MaxNumWeightsPerCuttingBoardSetEvent.OutputTuple,
      MaxNumWeightsPerCuttingBoardSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "QueueCuttingBoard(address,uint64,tuple[])": TypedContractEvent<
      QueueCuttingBoardEvent.InputTuple,
      QueueCuttingBoardEvent.OutputTuple,
      QueueCuttingBoardEvent.OutputObject
    >;
    QueueCuttingBoard: TypedContractEvent<
      QueueCuttingBoardEvent.InputTuple,
      QueueCuttingBoardEvent.OutputTuple,
      QueueCuttingBoardEvent.OutputObject
    >;

    "SetDefaultCuttingBoard(tuple)": TypedContractEvent<
      SetDefaultCuttingBoardEvent.InputTuple,
      SetDefaultCuttingBoardEvent.OutputTuple,
      SetDefaultCuttingBoardEvent.OutputObject
    >;
    SetDefaultCuttingBoard: TypedContractEvent<
      SetDefaultCuttingBoardEvent.InputTuple,
      SetDefaultCuttingBoardEvent.OutputTuple,
      SetDefaultCuttingBoardEvent.OutputObject
    >;

    "SetOperator(address,address)": TypedContractEvent<
      SetOperatorEvent.InputTuple,
      SetOperatorEvent.OutputTuple,
      SetOperatorEvent.OutputObject
    >;
    SetOperator: TypedContractEvent<
      SetOperatorEvent.InputTuple,
      SetOperatorEvent.OutputTuple,
      SetOperatorEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
