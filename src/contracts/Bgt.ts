/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Checkpoints {
  export type Checkpoint208Struct = {
    _key: BigNumberish;
    _value: BigNumberish;
  };

  export type Checkpoint208StructOutput = [_key: bigint, _value: bigint] & {
    _key: bigint;
    _value: bigint;
  };
}

export interface BgtInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLOCK_MODE"
      | "activateBoost"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "beraChef"
      | "boosted"
      | "boostedQueue"
      | "boostedRewardRate"
      | "boostees"
      | "boosts"
      | "cancelBoost"
      | "checkpoints"
      | "clock"
      | "commissionRewardRate"
      | "commissions"
      | "decimals"
      | "delegate"
      | "delegateBySig"
      | "delegates"
      | "dropBoost"
      | "eip712Domain"
      | "getPastTotalSupply"
      | "getPastVotes"
      | "getVotes"
      | "initialize"
      | "isWhitelistedSender"
      | "mint"
      | "minter"
      | "name"
      | "nonces"
      | "numCheckpoints"
      | "owner"
      | "queueBoost"
      | "queuedBoost"
      | "redeem"
      | "renounceOwnership"
      | "setBeraChef"
      | "setCommission"
      | "setMinter"
      | "setStaker"
      | "staker"
      | "symbol"
      | "totalBoosts"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unboostedBalanceOf"
      | "whitelistSender"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivateBoost"
      | "Approval"
      | "BeraChefChanged"
      | "CancelBoost"
      | "DelegateChanged"
      | "DelegateVotesChanged"
      | "DropBoost"
      | "EIP712DomainChanged"
      | "Initialized"
      | "MinterChanged"
      | "OwnershipTransferred"
      | "QueueBoost"
      | "Redeem"
      | "SenderWhitelisted"
      | "Transfer"
      | "UpdateCommission"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateBoost",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "beraChef", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boosted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "boostedQueue",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "boostedRewardRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boostees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "boosts", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "cancelBoost",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commissionRewardRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commissions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dropBoost",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedSender",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueBoost",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedBoost",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBeraChef",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommission",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStaker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "staker", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBoosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unboostedBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSender",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beraChef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boosted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostedQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boostedRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boostees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boosts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commissionRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dropBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queueBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queuedBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeraChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBoosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unboostedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSender",
    data: BytesLike
  ): Result;
}

export namespace ActivateBoostEvent {
  export type InputTuple = [
    sender: AddressLike,
    validator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, validator: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeraChefChangedEvent {
  export type InputTuple = [previous: AddressLike, current: AddressLike];
  export type OutputTuple = [previous: string, current: string];
  export interface OutputObject {
    previous: string;
    current: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelBoostEvent {
  export type InputTuple = [
    sender: AddressLike,
    validator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, validator: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateChangedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    fromDelegate: AddressLike,
    toDelegate: AddressLike
  ];
  export type OutputTuple = [
    delegator: string,
    fromDelegate: string,
    toDelegate: string
  ];
  export interface OutputObject {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateVotesChangedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    previousVotes: BigNumberish,
    newVotes: BigNumberish
  ];
  export type OutputTuple = [
    delegate: string,
    previousVotes: bigint,
    newVotes: bigint
  ];
  export interface OutputObject {
    delegate: string;
    previousVotes: bigint;
    newVotes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DropBoostEvent {
  export type InputTuple = [
    sender: AddressLike,
    validator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, validator: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinterChangedEvent {
  export type InputTuple = [previous: AddressLike, current: AddressLike];
  export type OutputTuple = [previous: string, current: string];
  export interface OutputObject {
    previous: string;
    current: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QueueBoostEvent {
  export type InputTuple = [
    sender: AddressLike,
    validator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [sender: string, validator: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    validator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [
    from: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, receiver: string, amount: bigint];
  export interface OutputObject {
    from: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SenderWhitelistedEvent {
  export type InputTuple = [sender: AddressLike, approved: boolean];
  export type OutputTuple = [sender: string, approved: boolean];
  export interface OutputObject {
    sender: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateCommissionEvent {
  export type InputTuple = [
    validator: AddressLike,
    oldRate: BigNumberish,
    newRate: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    oldRate: bigint,
    newRate: bigint
  ];
  export interface OutputObject {
    validator: string;
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bgt extends BaseContract {
  connect(runner?: ContractRunner | null): Bgt;
  waitForDeployment(): Promise<this>;

  interface: BgtInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLOCK_MODE: TypedContractMethod<[], [string], "view">;

  activateBoost: TypedContractMethod<
    [validator: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  beraChef: TypedContractMethod<[], [string], "view">;

  boosted: TypedContractMethod<
    [account: AddressLike, validator: AddressLike],
    [bigint],
    "view"
  >;

  boostedQueue: TypedContractMethod<
    [account: AddressLike, validator: AddressLike],
    [[bigint, bigint] & { blockNumberLast: bigint; balance: bigint }],
    "view"
  >;

  boostedRewardRate: TypedContractMethod<
    [validator: AddressLike, rewardRate: BigNumberish],
    [bigint],
    "view"
  >;

  boostees: TypedContractMethod<[validator: AddressLike], [bigint], "view">;

  boosts: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  cancelBoost: TypedContractMethod<
    [validator: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkpoints: TypedContractMethod<
    [account: AddressLike, pos: BigNumberish],
    [Checkpoints.Checkpoint208StructOutput],
    "view"
  >;

  clock: TypedContractMethod<[], [bigint], "view">;

  commissionRewardRate: TypedContractMethod<
    [validator: AddressLike, rewardRate: BigNumberish],
    [bigint],
    "view"
  >;

  commissions: TypedContractMethod<
    [validator: AddressLike],
    [[bigint, bigint] & { blockNumberLast: bigint; rate: bigint }],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  delegate: TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;

  delegateBySig: TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  delegates: TypedContractMethod<[account: AddressLike], [string], "view">;

  dropBoost: TypedContractMethod<
    [validator: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getPastTotalSupply: TypedContractMethod<
    [timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  getPastVotes: TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;

  getVotes: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  initialize: TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;

  isWhitelistedSender: TypedContractMethod<
    [sender: AddressLike],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [distributor: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  minter: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  numCheckpoints: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  queueBoost: TypedContractMethod<
    [validator: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  queuedBoost: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  redeem: TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBeraChef: TypedContractMethod<
    [_beraChef: AddressLike],
    [void],
    "nonpayable"
  >;

  setCommission: TypedContractMethod<
    [validator: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinter: TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;

  setStaker: TypedContractMethod<[_staker: AddressLike], [void], "nonpayable">;

  staker: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalBoosts: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unboostedBalanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  whitelistSender: TypedContractMethod<
    [sender: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLOCK_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateBoost"
  ): TypedContractMethod<[validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beraChef"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "boosted"
  ): TypedContractMethod<
    [account: AddressLike, validator: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "boostedQueue"
  ): TypedContractMethod<
    [account: AddressLike, validator: AddressLike],
    [[bigint, bigint] & { blockNumberLast: bigint; balance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "boostedRewardRate"
  ): TypedContractMethod<
    [validator: AddressLike, rewardRate: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "boostees"
  ): TypedContractMethod<[validator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "boosts"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelBoost"
  ): TypedContractMethod<
    [validator: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkpoints"
  ): TypedContractMethod<
    [account: AddressLike, pos: BigNumberish],
    [Checkpoints.Checkpoint208StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "clock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "commissionRewardRate"
  ): TypedContractMethod<
    [validator: AddressLike, rewardRate: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "commissions"
  ): TypedContractMethod<
    [validator: AddressLike],
    [[bigint, bigint] & { blockNumberLast: bigint; rate: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegateBySig"
  ): TypedContractMethod<
    [
      delegatee: AddressLike,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<[account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "dropBoost"
  ): TypedContractMethod<
    [validator: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPastTotalSupply"
  ): TypedContractMethod<[timepoint: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPastVotes"
  ): TypedContractMethod<
    [account: AddressLike, timepoint: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isWhitelistedSender"
  ): TypedContractMethod<[sender: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [distributor: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numCheckpoints"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "queueBoost"
  ): TypedContractMethod<
    [validator: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queuedBoost"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [receiver: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBeraChef"
  ): TypedContractMethod<[_beraChef: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCommission"
  ): TypedContractMethod<
    [validator: AddressLike, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinter"
  ): TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStaker"
  ): TypedContractMethod<[_staker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "staker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalBoosts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unboostedBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistSender"
  ): TypedContractMethod<
    [sender: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActivateBoost"
  ): TypedContractEvent<
    ActivateBoostEvent.InputTuple,
    ActivateBoostEvent.OutputTuple,
    ActivateBoostEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BeraChefChanged"
  ): TypedContractEvent<
    BeraChefChangedEvent.InputTuple,
    BeraChefChangedEvent.OutputTuple,
    BeraChefChangedEvent.OutputObject
  >;
  getEvent(
    key: "CancelBoost"
  ): TypedContractEvent<
    CancelBoostEvent.InputTuple,
    CancelBoostEvent.OutputTuple,
    CancelBoostEvent.OutputObject
  >;
  getEvent(
    key: "DelegateChanged"
  ): TypedContractEvent<
    DelegateChangedEvent.InputTuple,
    DelegateChangedEvent.OutputTuple,
    DelegateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateVotesChanged"
  ): TypedContractEvent<
    DelegateVotesChangedEvent.InputTuple,
    DelegateVotesChangedEvent.OutputTuple,
    DelegateVotesChangedEvent.OutputObject
  >;
  getEvent(
    key: "DropBoost"
  ): TypedContractEvent<
    DropBoostEvent.InputTuple,
    DropBoostEvent.OutputTuple,
    DropBoostEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MinterChanged"
  ): TypedContractEvent<
    MinterChangedEvent.InputTuple,
    MinterChangedEvent.OutputTuple,
    MinterChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "QueueBoost"
  ): TypedContractEvent<
    QueueBoostEvent.InputTuple,
    QueueBoostEvent.OutputTuple,
    QueueBoostEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "SenderWhitelisted"
  ): TypedContractEvent<
    SenderWhitelistedEvent.InputTuple,
    SenderWhitelistedEvent.OutputTuple,
    SenderWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateCommission"
  ): TypedContractEvent<
    UpdateCommissionEvent.InputTuple,
    UpdateCommissionEvent.OutputTuple,
    UpdateCommissionEvent.OutputObject
  >;

  filters: {
    "ActivateBoost(address,address,uint128)": TypedContractEvent<
      ActivateBoostEvent.InputTuple,
      ActivateBoostEvent.OutputTuple,
      ActivateBoostEvent.OutputObject
    >;
    ActivateBoost: TypedContractEvent<
      ActivateBoostEvent.InputTuple,
      ActivateBoostEvent.OutputTuple,
      ActivateBoostEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BeraChefChanged(address,address)": TypedContractEvent<
      BeraChefChangedEvent.InputTuple,
      BeraChefChangedEvent.OutputTuple,
      BeraChefChangedEvent.OutputObject
    >;
    BeraChefChanged: TypedContractEvent<
      BeraChefChangedEvent.InputTuple,
      BeraChefChangedEvent.OutputTuple,
      BeraChefChangedEvent.OutputObject
    >;

    "CancelBoost(address,address,uint128)": TypedContractEvent<
      CancelBoostEvent.InputTuple,
      CancelBoostEvent.OutputTuple,
      CancelBoostEvent.OutputObject
    >;
    CancelBoost: TypedContractEvent<
      CancelBoostEvent.InputTuple,
      CancelBoostEvent.OutputTuple,
      CancelBoostEvent.OutputObject
    >;

    "DelegateChanged(address,address,address)": TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;
    DelegateChanged: TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;

    "DelegateVotesChanged(address,uint256,uint256)": TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;
    DelegateVotesChanged: TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;

    "DropBoost(address,address,uint128)": TypedContractEvent<
      DropBoostEvent.InputTuple,
      DropBoostEvent.OutputTuple,
      DropBoostEvent.OutputObject
    >;
    DropBoost: TypedContractEvent<
      DropBoostEvent.InputTuple,
      DropBoostEvent.OutputTuple,
      DropBoostEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MinterChanged(address,address)": TypedContractEvent<
      MinterChangedEvent.InputTuple,
      MinterChangedEvent.OutputTuple,
      MinterChangedEvent.OutputObject
    >;
    MinterChanged: TypedContractEvent<
      MinterChangedEvent.InputTuple,
      MinterChangedEvent.OutputTuple,
      MinterChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "QueueBoost(address,address,uint128)": TypedContractEvent<
      QueueBoostEvent.InputTuple,
      QueueBoostEvent.OutputTuple,
      QueueBoostEvent.OutputObject
    >;
    QueueBoost: TypedContractEvent<
      QueueBoostEvent.InputTuple,
      QueueBoostEvent.OutputTuple,
      QueueBoostEvent.OutputObject
    >;

    "Redeem(address,address,uint256)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "SenderWhitelisted(address,bool)": TypedContractEvent<
      SenderWhitelistedEvent.InputTuple,
      SenderWhitelistedEvent.OutputTuple,
      SenderWhitelistedEvent.OutputObject
    >;
    SenderWhitelisted: TypedContractEvent<
      SenderWhitelistedEvent.InputTuple,
      SenderWhitelistedEvent.OutputTuple,
      SenderWhitelistedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateCommission(address,uint256,uint256)": TypedContractEvent<
      UpdateCommissionEvent.InputTuple,
      UpdateCommissionEvent.OutputTuple,
      UpdateCommissionEvent.OutputObject
    >;
    UpdateCommission: TypedContractEvent<
      UpdateCommissionEvent.InputTuple,
      UpdateCommissionEvent.OutputTuple,
      UpdateCommissionEvent.OutputObject
    >;
  };
}
